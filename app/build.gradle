apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply from: '../gradle/javapopConfig.gradle'

android {
    def config = rootProject.extensions.getByName("ext")

    compileSdkVersion config["compile_sdk"]

    defaultConfig {
        applicationId config["application_id"]
        minSdkVersion config["min_sdk"]
        targetSdkVersion config["target_sdk"]
        versionCode config["version_code"]
        versionName config["version_name"]
        testInstrumentationRunner config["test_runner"]
        buildConfigField "String", 'BASE_URL', apiUrl.productionApi
        javaCompileOptions {
            annotationProcessorOptions {
                includeCompileClasspath true
            }
        }
    }

    dataBinding {
        enabled true
    }

    packagingOptions {
        exclude 'META-INF/DEPENDENCIES.txt'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/dependencies.txt'
        exclude 'META-INF/LGPL2.1'
        exclude 'META-INF/rxjava.properties'
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = "1.8"
    }

    lintOptions {
        quiet true
        abortOnError false
        ignoreWarnings true
        disable 'InvalidPackage'   //Some libraries have issues with this.
    }

    signingConfigs {
        release {
            storeFile rootProject.file("keys/keystore.jks")
            storePassword System.getenv("ANDROID_KEYSTORE_PASSWORD")
            keyAlias System.getenv("ANDROID_KEY_ALIAS")
            keyPassword System.getenv("ANDROID_KEY_PASSWORD")
        }
    }

    buildTypes {
        debug {
            minifyEnabled false
            signingConfig signingConfigs.debug
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    androidExtensions {
        experimental = true
    }

    sourceSets {
        main {
            file('src/main/res-screen')
                    .listFiles()
                    .each { res.srcDirs += it.path }
        }
    }

}

dependencies {
    def applicationDependencies = rootProject.ext.mainApplication
    def unitTestDependencies = rootProject.ext.unitTesting
    def acceptanceTestDependencies = rootProject.ext.acceptanceTesting
    def developmentDependencies = rootProject.ext.development

    implementation applicationDependencies.kotlin
    implementation applicationDependencies.appCompat
    implementation applicationDependencies.constraintLayout
    implementation applicationDependencies.cardView
    implementation applicationDependencies.recyclerView
    implementation applicationDependencies.glide
    implementation applicationDependencies.glideAnnotations
    implementation applicationDependencies.retrofit
    implementation applicationDependencies.retrofitConverter
    implementation applicationDependencies.retrofitAdapterRxJava
    implementation applicationDependencies.retrofitLogging
    implementation applicationDependencies.rxJava
    implementation applicationDependencies.rxAndroid
    kapt applicationDependencies.dataBindingCompiler

    //Unit/Integration tests dependencies
    testImplementation unitTestDependencies.junit

    //Acceptance tests dependencies
    androidTestImplementation acceptanceTestDependencies.testRunner
    androidTestImplementation acceptanceTestDependencies.espressoCore

    //Development dependencies
    debugImplementation developmentDependencies.leakCanary
    releaseImplementation developmentDependencies.leakCanaryNoop
    testImplementation developmentDependencies.leakCanaryNoop

}
